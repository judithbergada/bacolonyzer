{"config":{"indexing":"full","lang":["en"],"min_search_length":3,"prebuild_index":false,"separator":"[\\s\\-]+"},"docs":[{"location":"","text":"Welcome to BaColonyzer Description BaColonyzer is a software to quantify the cell density of bacterial cultures from timecourse pictures. It uses image analysis tools to determine the fitness of spotted cultures of bacteria grown on solid agar, similarly to what Colonyzer does with yeast cultures ( Lawless et al. 2010 ). Colonyzer has been a great inspiration for BaColonyzer. BaColonyzer is very fast and robust, allowing the users to obtain reliable resuls without the need to adjust a large number of parameters. It performs well with bright as well as dark images, and it is implemented as a Python3 package. Available resources In this webpage, you can find documentation and instructions to install and use BaColonyzer: Installation Guide Usage Outputs Algorithm Enjoy using BaColonyzer!","title":"Home"},{"location":"#welcome-to-bacolonyzer","text":"Description BaColonyzer is a software to quantify the cell density of bacterial cultures from timecourse pictures. It uses image analysis tools to determine the fitness of spotted cultures of bacteria grown on solid agar, similarly to what Colonyzer does with yeast cultures ( Lawless et al. 2010 ). Colonyzer has been a great inspiration for BaColonyzer. BaColonyzer is very fast and robust, allowing the users to obtain reliable resuls without the need to adjust a large number of parameters. It performs well with bright as well as dark images, and it is implemented as a Python3 package.","title":"Welcome to BaColonyzer"},{"location":"#available-resources","text":"In this webpage, you can find documentation and instructions to install and use BaColonyzer: Installation Guide Usage Outputs Algorithm Enjoy using BaColonyzer!","title":"Available resources"},{"location":"algorithm/","text":"BaColonyzer algorithm Grid location BaColonyzer starts the analysis by finding the location of the grid. For that, it imports the grayscale version of the last image in series, which is used to generate a histogram of colors. Colors are represented as intensity values, from 0 to 255. Since the last image contains well-defined colony spots, the histogram usually shows two high peaks: the highest peak corresponds to the color of the agar, while the second peak shows the color of the colonies (Figure 1). As a quality check, BaColonyzer ensures that the color intensity of the colonies falls between 70% of the maximum color of the picture (upper bound) and twice the color of the agar (lower bound). Otherwise, it sets the color intensity of the colonies to be within this range. Figure 1. Last image is imported in grayscale and colors of spot and agar are retrieved from a histogram of intensity values. The intensity values of agar and spots are used to create an artificial image of the plate (template), for which users need to input the number of rows and columns of the grid. Resizing and changing the position of this template allows to find the best match with the actual grayscale image (Figure 2). This is achieved by computing the lowest normalized squared difference (The OpenCV Library) . Figure 2. Normalised squared difference is used to find the best match between a template of the plate and the last image. Once the best match is found, BaColonyzer is able to predict the location of the whole plate and to trim those parts of the image that might introduce noise (e.g. the borders). Image trimming, followed by automatic thresholding using Otsu\u2019s binarization (The OpenCV Library) , allow to get the position of the colonies and the agar (Figure 3). In order to ensure that pixels belonging to the colonies are never considered as agar, dilation of colony spots is also performed (The OpenCV Library) . For that, the dilation kernel is considered to be 5% of the colony area. Figure 3. Removal of plate borders and Otsu binarization, followed by dilation of the white pixels, are used to locate the agar and the colonies. Image analysis Each of the images in series is imported in grayscale and trimmed based on the grid location that has been previously computed. Colony areas are computed using the Otsu's binarization (The OpenCV Library) . By default, color intensities of the image are also normalised (divided by 255) to be in range 0-1. Alternatively, in order to compare different series of time-lapse images, BaColonyzer allows the users to provide a reference picture for the normalization. This must be an image showing a white and black paper next to each other, and must be taken using the same camera settings as the image series (Figure 4). The reference image is imported in grayscale and the color intensities are clipped at 1%-99% quantiles to exclude outiliers or noise. The resulting minimum and maximum intensity values (black and white, respectively) are taken to calibrate the color intensities of images using the expression below: NI = \\frac{OI - min_{ref}}{max_{ref} - min_{ref}}, NI = \\frac{OI - min_{ref}}{max_{ref} - min_{ref}}, where NI are the new intensity values of each image, OI are the original intensity values, min_{ref} min_{ref} is the intensity of the black color, and max_{ref} max_{ref} is the intensity of the white color. Figure 4. Example of a reference image. Black and white papers allow to normalize the results accounting for different camera settings. Next, in order to ensure an accurate analysis of each colony, BaColonyzer divides the agar plate into smaller patches that contain one colony spot. By default, the tool adjusts the intensity values of each patch by subtracting the mean intensity of the agar in this patch, thus correcting for color differences within and between images (Figure 5). Figure 5. BaColonyzer divides the plate into patches containg colony spots. Each patch is normalised by subtracting the color of the agar. At the end, BaColonyzer provides a big table with statistics of each colony, including normalised intensities (NI) of each patch, colony area, colony mean, colony variance, background mean, and background variance. Normalized intensity values of each patch (NI) are computed as the sum of all intensity values of the patch, divided by the number of pixels. Since all patches have exactly the same number of pixels, bigger colonies will result in higher normalized intensities, allowing to account also for the colony size. Results are stored as Output Data. Furthermore, in order to visually check that the grid location was achieved properly, BaColonyzer provides some Output Images. These are binary images resulting from an Otsu\u2019s Binarization (The OpenCV Library) , which is performed after the trimming step to let the users check whether the grid location was successful. Flowchart A flowchart showing the algorithm of BaColonyzer is found below: Figure 6. Flowchart of BaColonyzer algorithm. Enjoy using BaColonyzer!","title":"Algorithm"},{"location":"algorithm/#bacolonyzer-algorithm","text":"","title":"BaColonyzer algorithm"},{"location":"algorithm/#grid-location","text":"BaColonyzer starts the analysis by finding the location of the grid. For that, it imports the grayscale version of the last image in series, which is used to generate a histogram of colors. Colors are represented as intensity values, from 0 to 255. Since the last image contains well-defined colony spots, the histogram usually shows two high peaks: the highest peak corresponds to the color of the agar, while the second peak shows the color of the colonies (Figure 1). As a quality check, BaColonyzer ensures that the color intensity of the colonies falls between 70% of the maximum color of the picture (upper bound) and twice the color of the agar (lower bound). Otherwise, it sets the color intensity of the colonies to be within this range. Figure 1. Last image is imported in grayscale and colors of spot and agar are retrieved from a histogram of intensity values. The intensity values of agar and spots are used to create an artificial image of the plate (template), for which users need to input the number of rows and columns of the grid. Resizing and changing the position of this template allows to find the best match with the actual grayscale image (Figure 2). This is achieved by computing the lowest normalized squared difference (The OpenCV Library) . Figure 2. Normalised squared difference is used to find the best match between a template of the plate and the last image. Once the best match is found, BaColonyzer is able to predict the location of the whole plate and to trim those parts of the image that might introduce noise (e.g. the borders). Image trimming, followed by automatic thresholding using Otsu\u2019s binarization (The OpenCV Library) , allow to get the position of the colonies and the agar (Figure 3). In order to ensure that pixels belonging to the colonies are never considered as agar, dilation of colony spots is also performed (The OpenCV Library) . For that, the dilation kernel is considered to be 5% of the colony area. Figure 3. Removal of plate borders and Otsu binarization, followed by dilation of the white pixels, are used to locate the agar and the colonies.","title":"Grid location"},{"location":"algorithm/#image-analysis","text":"Each of the images in series is imported in grayscale and trimmed based on the grid location that has been previously computed. Colony areas are computed using the Otsu's binarization (The OpenCV Library) . By default, color intensities of the image are also normalised (divided by 255) to be in range 0-1. Alternatively, in order to compare different series of time-lapse images, BaColonyzer allows the users to provide a reference picture for the normalization. This must be an image showing a white and black paper next to each other, and must be taken using the same camera settings as the image series (Figure 4). The reference image is imported in grayscale and the color intensities are clipped at 1%-99% quantiles to exclude outiliers or noise. The resulting minimum and maximum intensity values (black and white, respectively) are taken to calibrate the color intensities of images using the expression below: NI = \\frac{OI - min_{ref}}{max_{ref} - min_{ref}}, NI = \\frac{OI - min_{ref}}{max_{ref} - min_{ref}}, where NI are the new intensity values of each image, OI are the original intensity values, min_{ref} min_{ref} is the intensity of the black color, and max_{ref} max_{ref} is the intensity of the white color. Figure 4. Example of a reference image. Black and white papers allow to normalize the results accounting for different camera settings. Next, in order to ensure an accurate analysis of each colony, BaColonyzer divides the agar plate into smaller patches that contain one colony spot. By default, the tool adjusts the intensity values of each patch by subtracting the mean intensity of the agar in this patch, thus correcting for color differences within and between images (Figure 5). Figure 5. BaColonyzer divides the plate into patches containg colony spots. Each patch is normalised by subtracting the color of the agar. At the end, BaColonyzer provides a big table with statistics of each colony, including normalised intensities (NI) of each patch, colony area, colony mean, colony variance, background mean, and background variance. Normalized intensity values of each patch (NI) are computed as the sum of all intensity values of the patch, divided by the number of pixels. Since all patches have exactly the same number of pixels, bigger colonies will result in higher normalized intensities, allowing to account also for the colony size. Results are stored as Output Data. Furthermore, in order to visually check that the grid location was achieved properly, BaColonyzer provides some Output Images. These are binary images resulting from an Otsu\u2019s Binarization (The OpenCV Library) , which is performed after the trimming step to let the users check whether the grid location was successful.","title":"Image analysis"},{"location":"algorithm/#flowchart","text":"A flowchart showing the algorithm of BaColonyzer is found below: Figure 6. Flowchart of BaColonyzer algorithm. Enjoy using BaColonyzer!","title":"Flowchart"},{"location":"installation/","text":"Installation Guide BaColonyzer is available in PyPI for Python3. To install it, please run the following command in your terminal: pip3 install bacolonyzer Alternatively, if you want to play with the code and make your own modifications, you can also download the code and install BaColonyzer in the development mode: git clone git@github.com:judithbergada/bacolonyzer.git cd bacolonyzer pip3 install -e . Once you have run any of the previous options, BaColonyzer will be available in your machine. You can try: bacolonyzer -h Please note BaColonyzer has been developed and tested under Linux and macOS, but it also works in Microsoft Windows. Enjoy using BaColonyzer!","title":"Installation"},{"location":"installation/#installation-guide","text":"BaColonyzer is available in PyPI for Python3. To install it, please run the following command in your terminal: pip3 install bacolonyzer Alternatively, if you want to play with the code and make your own modifications, you can also download the code and install BaColonyzer in the development mode: git clone git@github.com:judithbergada/bacolonyzer.git cd bacolonyzer pip3 install -e . Once you have run any of the previous options, BaColonyzer will be available in your machine. You can try: bacolonyzer -h Please note BaColonyzer has been developed and tested under Linux and macOS, but it also works in Microsoft Windows. Enjoy using BaColonyzer!","title":"Installation Guide"},{"location":"outputs/","text":"Outputs BaColonyzer will create two new folders to save the outputs: \"Output_Data\" and \"Output_Images\". These will be created in the given directory . If folders exist in advance, they will not be overwritten. However, if there are files inside these folders with the same name as BaColonyzer outputs, those files will be overwritten. Output_Data This folder will contain tab delimed text files with the image metrics computed by BaColonyzer. Each file will contain information of one image, and will be named exactly the same as the original image file, ending with \".out\". Here, users can find, for each image and each colony area: Row: row of the colony in the agar plate. Column: column of the colony in the agar plate. Intensity: total light intensity of the colony. This can be used as the cell density estimate for future calculations. Area: area of the colony. ColonyMean: mean intensity values of the colony. ColonyVariance: variance of the intensity values of the colony. BackgroundMean: mean intensity values of the agar. Barcode: prefix used to name the image. Filename: full name of the image. Output_Images This folder will contain binary images (black/white), which will be named exactly the same as the original image files used for the anlysis. The binary images can be used to visualy see the performance of BaColonyzer to detect the position of the plate, the agar and the colonies on the solid growth media. Thus, black pixels show the agar and white pixels correspond to the spots. In addition, the borders of the pictures have been deleted in order to take only the surface of the plate and ignore the rest. The area of the colonies in each image, which is shown numerically in \"Output_Data\", is inferred from these results. However, the cell density does not depend on these areas. Enjoy using BaColonyzer!","title":"Outputs"},{"location":"outputs/#outputs","text":"BaColonyzer will create two new folders to save the outputs: \"Output_Data\" and \"Output_Images\". These will be created in the given directory . If folders exist in advance, they will not be overwritten. However, if there are files inside these folders with the same name as BaColonyzer outputs, those files will be overwritten.","title":"Outputs"},{"location":"outputs/#output_data","text":"This folder will contain tab delimed text files with the image metrics computed by BaColonyzer. Each file will contain information of one image, and will be named exactly the same as the original image file, ending with \".out\". Here, users can find, for each image and each colony area: Row: row of the colony in the agar plate. Column: column of the colony in the agar plate. Intensity: total light intensity of the colony. This can be used as the cell density estimate for future calculations. Area: area of the colony. ColonyMean: mean intensity values of the colony. ColonyVariance: variance of the intensity values of the colony. BackgroundMean: mean intensity values of the agar. Barcode: prefix used to name the image. Filename: full name of the image.","title":"Output_Data"},{"location":"outputs/#output_images","text":"This folder will contain binary images (black/white), which will be named exactly the same as the original image files used for the anlysis. The binary images can be used to visualy see the performance of BaColonyzer to detect the position of the plate, the agar and the colonies on the solid growth media. Thus, black pixels show the agar and white pixels correspond to the spots. In addition, the borders of the pictures have been deleted in order to take only the surface of the plate and ignore the rest. The area of the colonies in each image, which is shown numerically in \"Output_Data\", is inferred from these results. However, the cell density does not depend on these areas. Enjoy using BaColonyzer!","title":"Output_Images"},{"location":"usage/","text":"Usage BaColonyzer has three main commands available for the users: bacolonyzer analyse : This is the most important command and is needed to analyse timeseries of QFA images. It locates the bacterial cultures on the plate, identifying spots and agar, and it generates output files for each image. The outputs contain the cell density estimates and the area of each spotted colony. bacolonyzer stabilize_images : This is a very useful command to stabilize the images that may have been moved or rotated during the experiment. It is very important to guarantee the precision and reliability of the results. bacolonyzer rename_images : This is a useful command to rename the image files according to the recommended date-time format: QFAxxxxxxxxxx_YYYY-MM-DD_hh-mm-ss.jpeg, where xxxxxxxxxx is a random number. A short description can be obtained as follows: $ bacolonyzer --help usage: bacolonyzer [-h] [-v] {analyse,rename_images,stabilize_images} Analyse BaColonyzer has been designed with a very few number of input parameters in order to guarantee its robustness and reliablility. A brief description of the inputs can be found with the help flag: $ bacolonyzer analyse --help usage: bacolonyzer analyse [-h] [-d DIRECTORY] [-c] [-r REFERENCE_IMAGE] [-q] [-e] [-g GRID_FORMAT [GRID_FORMAT ...]] [-f FRACTION] [-l] Directory Using --directory or -d , users specify the path to the folder that contains the image files for analysis. If not specified, BaColonyzer will search in the current directory. Please note BaColonyzer analyses all images found in the given directory . These are the files with the extension .jpg, .jpeg, .tif, .tiff or .png. BaColonyzer always assumes that alphabetical ordering of the images matches temporal order. This is why we recommend to rename all the image files according to this format: QFA_90000000001_YYYY-MM-DD_hh-mm-ss. BaColonyzer will only consider images found in the given directory, ignoring the files existing in any of the subfolders. Example: bacolonyzer analyse -d /Users/myname/Documents/2019-07-Saureus Grid format The --grid_format or -g is used by BaColonyzer to find the position of the agar and the colonies. Thus it is of great importance to specify it properly. The required format is: \"n_rows n_columns\" or \"n_rowsxn_columns\". By default, BaColonyzer will consider 8x12, which is the format corresponding to a 96 well-plate of 8 rows and 12 columns. Example: bacolonyzer analyse -g 8x12 Or alternatively: bacolonyzer analyse -g 8 12 Fraction In order to find the position of the spots and the agar, and to ignore the borders of the pictures if they are not part of the plate, BaColonyzer needs to know the fraction of the image that corresponds to the agar plate. Since this is very difficult to know, BaColonyzer tries different fractions, starting from a minimum value which is set by the user: --fraction or -f . By default, BaColonyzer will assume that the plate occupies at least 80% of the image, and it will try any fraction from 0.8 to 1. Please note If your plate occupies a small part of the image, it is safer to decrease the value of fraction . However, please consider that this will increase the computational time, and we do not recommend to use images where the agar plate is so small. You should also make sure that 0 < fraction < 1. Example: bacolonyzer analyse -f 0 .8 Light correction By default, BaColonyzer normalises all of the images and the colony areas by subtracting the value of the agar. This is highly recommended, since it will correct for differences in light intensities between and within images, and results will be more accurate. To disable the lighting correction, please use the flag --light_correction_off or -c . Example: bacolonyzer analyse -c Adaptive segmentation In order to correct for images that show a very low contrast between colonies and background, and to improve the detection of spots, Bacolonyzer can perform an adaptive segmentation of the image. By default, BaColonyzer will not correct for that. However, you can enable this option with the parameter -l or --low_contrasts . Example: bacolonyzer analyse -l Reference image In order to compare experiments in which the timelapse images were taken using different camera settings, BaColonyzer allows the users to provide a reference picture for the calibration. The path to this image can be specified using the parameter -r or --reference_image . The reference must be an image showing a white and black paper next to each other, and must be taken using the same camera settings as the image series that are being analysed. By default, BaColonyzer will not use any image for the calibration. However, it is highly recommended to provide one. Example: bacolonyzer analyse -r ./reference/Ref_ISO400.png Please note It is recommended not to have the reference image together with the rest of images that will be analysed. Instead, we recommend to create a subfolder or to place the reference image in another path. This is because during the analysis, all images in the directory will be analysed except the reference image. However, if the parameter -r is not specified and a reference image is found in the same directory, this reference picture will also be analysed and treated in the same way as the rest of the pictures. Other parameters --quiet or -q : using this flag, users can suppress any information messages printed in the screen during analysis. --endpoint or -e : using this flag, users will analyse only the last image in the series, ignoring the rest. This is useful to test single images. Examples: bacolonyzer analyse -q bacolonyzer analyse -e Stabilize images BaColonyzer offers the possibility to stabilize the image files of a directory to ensure that undesired rotations of movements do not affect the final results. A brief description of the inputs can be found using the help flag: $ bacolonyzer stabilize_images --help usage: bacolonyzer rename_images [-h] [-d DIRECTORY] [-o OUTPUT_DIRECTORY] [-q] Directory Using --directory or -d , users specify the path to the folder that contains all image files to stabilize. If not specified, BaColonyzer will search in the current directory. Example: bacolonyzer stabilize_images -d /Users/myname/Documents/2019-07-Saureus Output directory Using --output_directory or -o , users specify the new directory where the stabilized images will be stored. By default, BaColonyzer creates a new folder inside the current directory, which is named \"corrected_images\". Please note If the output directory does not exist, it will be created. If it exists, the images inside this directory will be overwritten. Example: bacolonyzer stabilize_images -o /Users/myname/Documents/2019-07-Saureus_correct Other parameters --quiet or -q : using this flag, users can suppress any information messages printed in the screen during analysis. Examples: bacolonyzer stabilize_images -q Rename images BaColonyzer offers the possibility to rename the image files of a directory according to a format which is highly recommended: QFAxxxxxxxxxx_YYYY-MM-DD_hh-mm-ss.jpeg, where xxxxxxxxxx is a random number. A brief description of the inputs can be found using the help flag: $ bacolonyzer rename_images --help usage: bacolonyzer rename_images [-h] [-d DIRECTORY] [-g GLOB] [-p PREFIX] [-m] [-s START_TIME] [-i INTERVAL] [--no_dry_run] Directory Using --directory or -d , users specify the path to the folder that contains all files to rename. If not specified, BaColonyzer will search in the current directory. Please note BaColonyzer will rename all files in the given directory that match a given glob (see glob ). Example: bacolonyzer rename_images -d /Users/myname/Documents/2019-07-Saureus Glob The parameter --glob or -g allows the users to choose the glob to match. Thus all files containing this glob will be renamed. By default, BaColonyzer will rename files ending with .jpg. Example (rename all files ending with .png): bacolonyzer rename_images -g *.png Example 2 (rename all files starting with IMG_): bacolonyzer rename_images -g IMG_* Read metadata By default, BaColonyzer will rename all image files by using the date and time information retrieved from the images metadata. In order to avoid using images metadata for the renaming, the flag -m or --no_read_metadata is needed. In this case, the renaming will take place according to parameters -s and -i . Example: bacolonyzer rename_images -m -s \"2019-08-11 12:30\" -i 30 Start time Users can specify with --start_time or s the date and time of the first image, which will be used as a reference to rename the whole image series. By default, BaColonyzer will take the current date and time. Required format: \"YYYY-MM-DD hh:mm\". Example: bacolonyzer rename_images -m -s \"2019-08-11 12:30\" Please note This parameter will only be considered if users also require flag -m . The date time format must be given within quotes. Dry run By default, BaColonyzer will only show the renaming of the image files. However, to keep the users safe, it will not apply the modifications. In order to definitely rename all files, the flag --no_dry_run is needed. Example: bacolonyzer rename_images --no_dry_run Other parameters --interval or -i : this parameter should be adjusted to define the time interval between images (in minutes), and will only be considered together with parameter -m . By default, BaColonyzer assumes 30min. Example: bacolonyzer rename_images -m -i 30 --prefix or -p : this parameter defines the prefix of the new names. It is recommended to use a barcode for the images, and by default, BaColonyzer will use QFAxxxxxxxxxx_, where xxxxxxxxxx is a random number. Example: bacolonyzer rename_images -p QFAxxxxxxxxxx_ Enjoy using BaColonyzer!","title":"Usage"},{"location":"usage/#usage","text":"BaColonyzer has three main commands available for the users: bacolonyzer analyse : This is the most important command and is needed to analyse timeseries of QFA images. It locates the bacterial cultures on the plate, identifying spots and agar, and it generates output files for each image. The outputs contain the cell density estimates and the area of each spotted colony. bacolonyzer stabilize_images : This is a very useful command to stabilize the images that may have been moved or rotated during the experiment. It is very important to guarantee the precision and reliability of the results. bacolonyzer rename_images : This is a useful command to rename the image files according to the recommended date-time format: QFAxxxxxxxxxx_YYYY-MM-DD_hh-mm-ss.jpeg, where xxxxxxxxxx is a random number. A short description can be obtained as follows: $ bacolonyzer --help usage: bacolonyzer [-h] [-v] {analyse,rename_images,stabilize_images}","title":"Usage"},{"location":"usage/#analyse","text":"BaColonyzer has been designed with a very few number of input parameters in order to guarantee its robustness and reliablility. A brief description of the inputs can be found with the help flag: $ bacolonyzer analyse --help usage: bacolonyzer analyse [-h] [-d DIRECTORY] [-c] [-r REFERENCE_IMAGE] [-q] [-e] [-g GRID_FORMAT [GRID_FORMAT ...]] [-f FRACTION] [-l] Directory Using --directory or -d , users specify the path to the folder that contains the image files for analysis. If not specified, BaColonyzer will search in the current directory. Please note BaColonyzer analyses all images found in the given directory . These are the files with the extension .jpg, .jpeg, .tif, .tiff or .png. BaColonyzer always assumes that alphabetical ordering of the images matches temporal order. This is why we recommend to rename all the image files according to this format: QFA_90000000001_YYYY-MM-DD_hh-mm-ss. BaColonyzer will only consider images found in the given directory, ignoring the files existing in any of the subfolders. Example: bacolonyzer analyse -d /Users/myname/Documents/2019-07-Saureus Grid format The --grid_format or -g is used by BaColonyzer to find the position of the agar and the colonies. Thus it is of great importance to specify it properly. The required format is: \"n_rows n_columns\" or \"n_rowsxn_columns\". By default, BaColonyzer will consider 8x12, which is the format corresponding to a 96 well-plate of 8 rows and 12 columns. Example: bacolonyzer analyse -g 8x12 Or alternatively: bacolonyzer analyse -g 8 12 Fraction In order to find the position of the spots and the agar, and to ignore the borders of the pictures if they are not part of the plate, BaColonyzer needs to know the fraction of the image that corresponds to the agar plate. Since this is very difficult to know, BaColonyzer tries different fractions, starting from a minimum value which is set by the user: --fraction or -f . By default, BaColonyzer will assume that the plate occupies at least 80% of the image, and it will try any fraction from 0.8 to 1. Please note If your plate occupies a small part of the image, it is safer to decrease the value of fraction . However, please consider that this will increase the computational time, and we do not recommend to use images where the agar plate is so small. You should also make sure that 0 < fraction < 1. Example: bacolonyzer analyse -f 0 .8 Light correction By default, BaColonyzer normalises all of the images and the colony areas by subtracting the value of the agar. This is highly recommended, since it will correct for differences in light intensities between and within images, and results will be more accurate. To disable the lighting correction, please use the flag --light_correction_off or -c . Example: bacolonyzer analyse -c Adaptive segmentation In order to correct for images that show a very low contrast between colonies and background, and to improve the detection of spots, Bacolonyzer can perform an adaptive segmentation of the image. By default, BaColonyzer will not correct for that. However, you can enable this option with the parameter -l or --low_contrasts . Example: bacolonyzer analyse -l Reference image In order to compare experiments in which the timelapse images were taken using different camera settings, BaColonyzer allows the users to provide a reference picture for the calibration. The path to this image can be specified using the parameter -r or --reference_image . The reference must be an image showing a white and black paper next to each other, and must be taken using the same camera settings as the image series that are being analysed. By default, BaColonyzer will not use any image for the calibration. However, it is highly recommended to provide one. Example: bacolonyzer analyse -r ./reference/Ref_ISO400.png Please note It is recommended not to have the reference image together with the rest of images that will be analysed. Instead, we recommend to create a subfolder or to place the reference image in another path. This is because during the analysis, all images in the directory will be analysed except the reference image. However, if the parameter -r is not specified and a reference image is found in the same directory, this reference picture will also be analysed and treated in the same way as the rest of the pictures. Other parameters --quiet or -q : using this flag, users can suppress any information messages printed in the screen during analysis. --endpoint or -e : using this flag, users will analyse only the last image in the series, ignoring the rest. This is useful to test single images. Examples: bacolonyzer analyse -q bacolonyzer analyse -e","title":"Analyse"},{"location":"usage/#stabilize-images","text":"BaColonyzer offers the possibility to stabilize the image files of a directory to ensure that undesired rotations of movements do not affect the final results. A brief description of the inputs can be found using the help flag: $ bacolonyzer stabilize_images --help usage: bacolonyzer rename_images [-h] [-d DIRECTORY] [-o OUTPUT_DIRECTORY] [-q] Directory Using --directory or -d , users specify the path to the folder that contains all image files to stabilize. If not specified, BaColonyzer will search in the current directory. Example: bacolonyzer stabilize_images -d /Users/myname/Documents/2019-07-Saureus Output directory Using --output_directory or -o , users specify the new directory where the stabilized images will be stored. By default, BaColonyzer creates a new folder inside the current directory, which is named \"corrected_images\". Please note If the output directory does not exist, it will be created. If it exists, the images inside this directory will be overwritten. Example: bacolonyzer stabilize_images -o /Users/myname/Documents/2019-07-Saureus_correct Other parameters --quiet or -q : using this flag, users can suppress any information messages printed in the screen during analysis. Examples: bacolonyzer stabilize_images -q","title":"Stabilize images"},{"location":"usage/#rename-images","text":"BaColonyzer offers the possibility to rename the image files of a directory according to a format which is highly recommended: QFAxxxxxxxxxx_YYYY-MM-DD_hh-mm-ss.jpeg, where xxxxxxxxxx is a random number. A brief description of the inputs can be found using the help flag: $ bacolonyzer rename_images --help usage: bacolonyzer rename_images [-h] [-d DIRECTORY] [-g GLOB] [-p PREFIX] [-m] [-s START_TIME] [-i INTERVAL] [--no_dry_run] Directory Using --directory or -d , users specify the path to the folder that contains all files to rename. If not specified, BaColonyzer will search in the current directory. Please note BaColonyzer will rename all files in the given directory that match a given glob (see glob ). Example: bacolonyzer rename_images -d /Users/myname/Documents/2019-07-Saureus Glob The parameter --glob or -g allows the users to choose the glob to match. Thus all files containing this glob will be renamed. By default, BaColonyzer will rename files ending with .jpg. Example (rename all files ending with .png): bacolonyzer rename_images -g *.png Example 2 (rename all files starting with IMG_): bacolonyzer rename_images -g IMG_* Read metadata By default, BaColonyzer will rename all image files by using the date and time information retrieved from the images metadata. In order to avoid using images metadata for the renaming, the flag -m or --no_read_metadata is needed. In this case, the renaming will take place according to parameters -s and -i . Example: bacolonyzer rename_images -m -s \"2019-08-11 12:30\" -i 30 Start time Users can specify with --start_time or s the date and time of the first image, which will be used as a reference to rename the whole image series. By default, BaColonyzer will take the current date and time. Required format: \"YYYY-MM-DD hh:mm\". Example: bacolonyzer rename_images -m -s \"2019-08-11 12:30\" Please note This parameter will only be considered if users also require flag -m . The date time format must be given within quotes. Dry run By default, BaColonyzer will only show the renaming of the image files. However, to keep the users safe, it will not apply the modifications. In order to definitely rename all files, the flag --no_dry_run is needed. Example: bacolonyzer rename_images --no_dry_run Other parameters --interval or -i : this parameter should be adjusted to define the time interval between images (in minutes), and will only be considered together with parameter -m . By default, BaColonyzer assumes 30min. Example: bacolonyzer rename_images -m -i 30 --prefix or -p : this parameter defines the prefix of the new names. It is recommended to use a barcode for the images, and by default, BaColonyzer will use QFAxxxxxxxxxx_, where xxxxxxxxxx is a random number. Example: bacolonyzer rename_images -p QFAxxxxxxxxxx_ Enjoy using BaColonyzer!","title":"Rename images"}]}